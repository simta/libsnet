/*
 * Copyright (c) Regents of The University of Michigan
 * See COPYING.
 */

#ifndef SNET_H_
#define SNET_H_

@CONFIG_DEFINES@

#ifdef __STDC__
#define ___P(x)		x
#else /* __STDC__ */
#define ___P(x)		()
#endif /* __STDC__ */

#include <sys/time.h>
#include <sys/types.h>

#ifdef SNET_HAVE_LIBSSL
#include <openssl/ssl.h>
#endif /* HAVE_LIBSSL */

#ifdef SNET_HAVE_ZLIB
#include <zlib.h>
#endif /* HAVE_ZLIB */

#ifdef SNET_HAVE_LIBSASL
#include <sasl/sasl.h>
#endif /* HAVE_LIBSASL */

typedef struct {
#ifdef SNET_HAVE_LIBSSL
    void                *sn_ssl;
#endif /* SNET_HAVE_LIBSSL */
#ifdef SNET_HAVE_LIBSASL
    sasl_conn_t         *sn_saslconn;
#endif /* SNET_HAVE_LIBSASL */
    char                *sn_rbuf;
    char                *sn_rend;
    char                *sn_rcur;
    char                *sn_wbuf;
    char                *sn_zbuf;
    size_t              sn_maxlen;
    size_t		sn_rbuflen;
    size_t              sn_wbuflen;
    size_t              sn_zbuflen;
    struct timeval	sn_read_timeout;
    struct timeval	sn_write_timeout;
    struct timeval	sn_ssl_connect_timeout;
    struct timeval	sn_ssl_accept_timeout;
    int                 sn_fd;
    int			sn_rstate;
    int			sn_flag;
    int                 sn_saslssf;
    int                 sn_saslmaxout;

#ifdef SNET_HAVE_ZLIB
    z_stream		sn_zistream;
    z_stream		sn_zostream;
#endif /* HAVE_ZLIB */

} SNET;

#define SNET_EOF		    (1<<0)
#define SNET_TLS		    (1<<1)
#define SNET_SASL		    (1<<2)
#define SNET_WRITE_TIMEOUT	    (1<<3)
#define SNET_READ_TIMEOUT	    (1<<4)
#define SNET_ZLIB                   (1<<5)
#define SNET_SSL_CONNECT_TIMEOUT    (1<<6)
#define SNET_SSL_ACCEPT_TIMEOUT     (1<<7)

#define snet_fd( sn )	((sn)->sn_fd)
#define snet_saslssf( sn )	((sn)->sn_saslssf)
#define snet_flags( sn )	((sn)->sn_flag)
#define snet_zistream( sn )	((sn)->sn_zistream)
#define snet_zostream( sn )	((sn)->sn_zostream)

#define snet_writef( sn, ... )	snet_writeftv((sn),NULL, __VA_ARGS__ )

int	snet_eof ___P(( SNET * ));
SNET	*snet_attach ___P(( int, size_t ));
SNET	*snet_open ___P(( const char *, int, int, size_t ));
int	snet_close ___P(( SNET * ));
ssize_t	snet_writeftv ___P(( SNET *, struct timeval *, const char *, ... ));
char	*snet_getline ___P(( SNET *, struct timeval * ));
char	*snet_getline_multi ___P(( SNET *, void (*)(char *),
		struct timeval * ));
void	snet_timeout ___P(( SNET *, int, struct timeval * ));
int	snet_hasdata ___P(( SNET * ));
ssize_t snet_flush ___P(( SNET * ));
ssize_t	snet_read ___P(( SNET *, char *, size_t, struct timeval * ));
ssize_t	snet_write ___P(( SNET *, char *, size_t, struct timeval * ));
int	snet_setcompression( SNET *, int, int );
int     snet_select( int, fd_set *, fd_set *, fd_set *, struct timeval * );
#ifdef SNET_HAVE_LIBSSL
int	snet_starttls ___P(( SNET *, SSL_CTX *, int ));
int     snet_starttls_tv ___P(( SNET *, SSL_CTX *, int, struct timeval * ));
#endif /* HAVE_LIBSSL */
#ifdef SNET_HAVE_LIBSASL
int	snet_setsasl  ___P(( SNET *, sasl_conn_t * ));
#endif /* HAVE_LIBSASL */

#endif /* SNET_H_ */
